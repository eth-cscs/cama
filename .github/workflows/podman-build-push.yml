name: Build, Push Docker Image, and Update Changelog

on:
  push:
    branches:
      - '**'
    tags:
      - '**'  # Trigger on any tag push (e.g., v1.0.0)
  pull_request:
    branches:
      - '**'
  workflow_dispatch:
    inputs:
      tag:
        description: 'Tag to checkout and run pipeline for'
        required: true
        type: string

permissions:
  contents: write  # Updated to allow committing changelog
  packages: write  # Required to push to GitHub Container Registry
  pull-requests: write  # Required for creating PRs for changelog updates

env:
  DOCKER_IMAGE_NAME: manta-ws  # Image name matching the repository name
  DOCKER_REGISTRY: ghcr.io  # GitHub Container Registry

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.tag || github.ref }}

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Cache Rust dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-

      - name: Run tests
        run: cargo test

      - name: Test build
        if: github.event_name == 'pull_request'  # Test build to check if everything is fine during pull requests
        run: cargo install --path .

  generate-changelog:
    runs-on: ubuntu-latest
    needs: test  # Run after tests pass
    if: |
      github.event_name != 'pull_request' &&
      (github.event_name == 'workflow_dispatch' ||
       github.ref_type == 'tag' ||
       github.ref_name == 'main')  
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Full history for git-cliff
          ref: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.tag || github.ref }}

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Install git-cliff
        uses: baptiste0928/cargo-install@v3
        with:
          crate: git-cliff
          version: "^2.6"  # Stable version

      - name: Get Cargo version
        id: cargo-version
        run: |
          VERSION=$(grep '^version' Cargo.toml | head -n1 | cut -d'"' -f2)
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Generate CHANGELOG.md
        id: generate
        run: |
          git-cliff --config cliff.toml --tag ${{ steps.cargo-version.outputs.version }} -o CHANGELOG.md
          if git diff --quiet CHANGELOG.md; then
            echo "changes=false" >> $GITHUB_OUTPUT
          else
            echo "changes=true" >> $GITHUB_OUTPUT
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Commit changelog
        if: steps.generate.outputs.changes == 'true'
        run: |
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          git add CHANGELOG.md
          git commit -m "chore: update CHANGELOG.md for v${{ steps.cargo-version.outputs.version }}"
          git push

          #      - name: Create Pull Request
          #        if: steps.generate.outputs.changes == 'true' && github.ref_name == 'main'
          #        uses: peter-evans/create-pull-request@v4
          #        with:
          #          token: ${{ secrets.GITHUB_TOKEN }}
          #          commit-message: "chore: update CHANGELOG.md"
          #          title: "üìù Update Changelog for v${{ steps.cargo-version.outputs.version }}"
          #          body: "This PR updates the CHANGELOG.md to include changes for v${{ steps.cargo-version.outputs.version }}."
          #          branch: chore/update-changelog

  dockerize:
    runs-on: ubuntu-latest
    needs: [test, generate-changelog]  # Run after tests and changelog generation
    if: github.event_name != 'pull_request'  # Only run for push or workflow_dispatch
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.tag || github.ref }}

      - name: Check Podman version
        run: podman version

      - name: Log in to GHCR
        run: echo "${{ secrets.GITHUB_TOKEN }}" | podman login ${{ env.DOCKER_REGISTRY }} -u ${{ github.actor }} --password-stdin

      - name: Build and push Docker image
        run: |
          # Determine the tag based on the event
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            IMAGE_TAG="${{ github.event.inputs.tag }}"
          elif [[ "${{ github.event_name }}" == "push" && "${{ github.ref_type }}" == "tag" ]]; then
            IMAGE_TAG="${{ github.ref_name }}"
          elif [[ "${{ github.event_name }}" == "push" && "${{ github.ref_name }}" == "main" ]]; then
            IMAGE_TAG="latest"
          else
            # Sanitize branch name by replacing '/' with '-'
            IMAGE_TAG=$(echo "${{ github.ref_name }}" | tr '/' '-')
          fi
          # Build the image with the determined tag
          podman build -t ${{ env.DOCKER_REGISTRY }}/${{ github.repository_owner }}/${{ env.DOCKER_IMAGE_NAME }}:${IMAGE_TAG} .
          # Push the image to GHCR
          podman push ${{ env.DOCKER_REGISTRY }}/${{ github.repository_owner }}/${{ env.DOCKER_IMAGE_NAME }}:${IMAGE_TAG}
